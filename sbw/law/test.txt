// Player Manager
impl SonifyPlayer {
    pub fn new(channels: u8, sample_rate: u32) -> Result<Self> { // Define Player accordingly to our setup
        info!(
            "player spec: channels->{}, sample_rate->{}",
            channels, sample_rate
        );
        let spec = Spec {
            format: Format::S16le,
            channels,
            rate: sample_rate,
        };

        info!("player has been setup");
        Ok(Self {
            player: Simple::new(
                None,
                "Sonify",
                libpulse_binding::stream::Direction::Playback,
                None,
                "Audio",
                &spec,
                None,
                None,
            )?,
        })
    }

    pub fn play_frame(&self, frame: Vec<u8>) -> Result<()> { // Play each frame (chunk) to play it inside Linux audio lib
        if self.player.write(&frame).is_err() {
            tracing::error!("failed to write audio frame")
        }
        Ok(())
    }
}
